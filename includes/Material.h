#ifndef MATERIAL_H
#define MATERIAL_H

#include "TextureGroup.h" 
#include "Shader.h" 

/**
 * @file Material.h
 * Material implementation 
 * 
 */

/**
 * @brief Material class implementation 
 * 
 */
class Material{
public:
	
	/**
	 * @brief Construct a new Material object
	 * 
	 */
	Material(); 
	
	/**
	 * @brief Destroy the Material object
	 * 
	 */
	virtual ~Material(); 
	
	/**
	 * @brief Add a texture from the texture database to the material structure
	 * 
	 * @param index Index of the texture in the database map
	 * @param type Type of the texture to be added
	 * @see Texture::TYPE
	 */
	virtual void addTexture(unsigned int index , Texture::TYPE type);
	
	/**
	 * @brief Bind the material data to the shader
	 * 
	 */
	virtual void bind();
	
	/**
	 * @brief Cleans the material data
	 * 
	 */
	virtual void clean();
	
	/**
	 * @brief Initialize materials and textures 
	 * 
	 */
	virtual void initializeMaterial(); 
private:
	TextureGroup textures_group ;			/**<A structure of every type of texture to be bound*/
	float dielectric_factor; 				/**<Metallic factor : 0.0 = full dielectric , 1.0 = full metallic*/
	float roughtness_factor; 				/**<Roughness factor : 0.0 = smooth , 1.0 = rough*/ 	
	float transmission_factor; 				/**<Defines amount of light transmitted through the surface*/
	float emissive_factor;					/**<Defines the amount of light generated by the material*/


};







#endif
